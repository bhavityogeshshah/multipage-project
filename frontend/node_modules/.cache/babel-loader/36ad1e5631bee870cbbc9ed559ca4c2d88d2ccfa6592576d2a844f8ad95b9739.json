{"ast":null,"code":"var _jsxFileName = \"C:\\\\udemy-react\\\\multipage-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function load() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'};\n    throw json({\n      message: 'Could not fetch elements'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  defer({});\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","load","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/udemy-react/multipage-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  const events = data.events;\r\n  return (\r\n    <>\r\n      <EventsList events={events} />\r\n    </>\r\n  );\r\n}\r\nexport default EventsPage;\r\n\r\n\r\nasync function load(){\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return {isError: true, message: 'Could not fetch events'};\r\n    throw json({ message: 'Could not fetch elements' },\r\n      { status: 500 });\r\n  } else {\r\n    return response\r\n  }\r\n}\r\nexport function loader() {\r\n  defer({\r\n    \r\n  })\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,QAAQ,kBAAkB;AAC7D,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAElD,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B,MAAMW,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC1B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACEP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBAC9B,CAAC;AAEP;AAACP,EAAA,CATQD,UAAU;EAAA,QACJR,aAAa;AAAA;AAAAiB,EAAA,GADnBT,UAAU;AAUnB,eAAeA,UAAU;AAGzB,eAAeU,IAAIA,CAAA,EAAE;EACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMpB,IAAI,CAAC;MAAEqB,OAAO,EAAE;IAA2B,CAAC,EAChD;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpB,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AACA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvBtB,KAAK,CAAC,CAEN,CAAC,CAAC;AACJ;AAAC,IAAAe,EAAA;AAAAQ,YAAA,CAAAR,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}