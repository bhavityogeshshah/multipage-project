{"ast":null,"code":"var _jsxFileName = \"C:\\\\udemy-react\\\\multipage-project\\\\frontend\\\\src\\\\pages\\\\EventDetail.js\",\n  _s = $RefreshSig$();\nimport { useRouteLoaderData, json, redirect } from \"react-router-dom\";\nimport EventItem from \"../components/EventItem\";\nimport EventsList from \"../components/EventsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventDetailPage = () => {\n  _s();\n  const data = useRouteLoaderData('event-detail');\n  const events = data.event;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(EventItem, {\n      event: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EventsList, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_s(EventDetailPage, \"4DBW6nwrvXRMSwRBgIay5Sszcp8=\", false, function () {\n  return [useRouteLoaderData];\n});\n_c = EventDetailPage;\nexport default EventDetailPage;\nasync function loadEvent(id) {\n  const response = await fetch('http://localhost:8080/events/' + id);\n  if (!response.ok) {\n    throw json({\n      message: 'Could not fetch details of selected elements'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const id = params.eventId;\n}\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'};\n    throw json({\n      message: 'Could not fetch elements'\n    }, {\n      status: 500\n    });\n  } else {\n    const resData = await response.json();\n    return resData.events;\n  }\n}\nexport async function action({\n  request,\n  params\n}) {\n  const eventId = params.eventId;\n  const response = await fetch('http://localhost:8080/events/' + eventId, {\n    method: request.method\n  });\n  if (!response.ok) {\n    throw json({\n      message: 'Could not delete event'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"EventDetailPage\");","map":{"version":3,"names":["useRouteLoaderData","json","redirect","EventItem","EventsList","jsxDEV","_jsxDEV","EventDetailPage","_s","data","events","event","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvent","id","response","fetch","ok","message","status","loader","request","params","eventId","loadEvents","resData","action","method","$RefreshReg$"],"sources":["C:/udemy-react/multipage-project/frontend/src/pages/EventDetail.js"],"sourcesContent":["import { useRouteLoaderData, json, redirect } from \"react-router-dom\"\r\nimport EventItem from \"../components/EventItem\";\r\nimport EventsList from \"../components/EventsList\";\r\n\r\nconst EventDetailPage = () => {\r\n\r\n  const data = useRouteLoaderData('event-detail');\r\n  const events = data.event\r\n  return (\r\n    <div>\r\n      <EventItem event={events} />\r\n      <EventsList />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default EventDetailPage; \r\n\r\nasync function loadEvent(id){\r\n  const response = await fetch('http://localhost:8080/events/' + id)\r\n  if(!response.ok){\r\n    throw json({ message: 'Could not fetch details of selected elements' },\r\n      { status: 500 });\r\n  }else{\r\n    return response;\r\n  }\r\n}\r\n\r\n\r\nexport async function loader({request, params}) {\r\n  const id = params.eventId\r\n  \r\n}\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return {isError: true, message: 'Could not fetch events'};\r\n    throw json({ message: 'Could not fetch elements' },\r\n      { status: 500 });\r\n  } else {\r\n    const resData = await response.json()\r\n    return resData.events;\r\n  }\r\n}\r\n\r\n\r\nexport async function action({request, params}){\r\n  const eventId = params.eventId;\r\n  const response =  await fetch('http://localhost:8080/events/' + eventId,{\r\n    method: request.method,\r\n  })\r\n\r\n  if(!response.ok){\r\n    throw json({ message: 'Could not delete event'},\r\n      { status: 500 });\r\n  }\r\n  return redirect('/events');\r\n}"],"mappings":";;AAAA,SAASA,kBAAkB,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AACrE,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE5B,MAAMC,IAAI,GAAGT,kBAAkB,CAAC,cAAc,CAAC;EAC/C,MAAMU,MAAM,GAAGD,IAAI,CAACE,KAAK;EACzB,oBACEL,OAAA;IAAAM,QAAA,gBACEN,OAAA,CAACH,SAAS;MAACQ,KAAK,EAAED;IAAO;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC5BV,OAAA,CAACF,UAAU;MAAAS,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV,CAAC;AAAAR,EAAA,CAVKD,eAAe;EAAA,QAENP,kBAAkB;AAAA;AAAAiB,EAAA,GAF3BV,eAAe;AAYrB,eAAeA,eAAe;AAE9B,eAAeW,SAASA,CAACC,EAAE,EAAC;EAC1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,GAAGF,EAAE,CAAC;EAClE,IAAG,CAACC,QAAQ,CAACE,EAAE,EAAC;IACd,MAAMrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAA+C,CAAC,EACpE;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpB,CAAC,MAAI;IACH,OAAOJ,QAAQ;EACjB;AACF;AAGA,OAAO,eAAeK,MAAMA,CAAC;EAACC,OAAO;EAAEC;AAAM,CAAC,EAAE;EAC9C,MAAMR,EAAE,GAAGQ,MAAM,CAACC,OAAO;AAE3B;AAEA,eAAeC,UAAUA,CAAA,EAAG;EAC1B,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAA2B,CAAC,EAChD;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpB,CAAC,MAAM;IACL,MAAMM,OAAO,GAAG,MAAMV,QAAQ,CAACnB,IAAI,CAAC,CAAC;IACrC,OAAO6B,OAAO,CAACpB,MAAM;EACvB;AACF;AAGA,OAAO,eAAeqB,MAAMA,CAAC;EAACL,OAAO;EAAEC;AAAM,CAAC,EAAC;EAC7C,MAAMC,OAAO,GAAGD,MAAM,CAACC,OAAO;EAC9B,MAAMR,QAAQ,GAAI,MAAMC,KAAK,CAAC,+BAA+B,GAAGO,OAAO,EAAC;IACtEI,MAAM,EAAEN,OAAO,CAACM;EAClB,CAAC,CAAC;EAEF,IAAG,CAACZ,QAAQ,CAACE,EAAE,EAAC;IACd,MAAMrB,IAAI,CAAC;MAAEsB,OAAO,EAAE;IAAwB,CAAC,EAC7C;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpB;EACA,OAAOtB,QAAQ,CAAC,SAAS,CAAC;AAC5B;AAAC,IAAAe,EAAA;AAAAgB,YAAA,CAAAhB,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}