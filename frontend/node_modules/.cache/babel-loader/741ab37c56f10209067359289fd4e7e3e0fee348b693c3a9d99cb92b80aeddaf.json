{"ast":null,"code":"var _jsxFileName = \"C:\\\\udemy-react\\\\multipage-project\\\\frontend\\\\src\\\\pages\\\\Events.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData, json, defer, Await } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { Suspense } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  return;\n  /*#__PURE__*/_jsxDEV(Suspense, {\n    children: /*#__PURE__*/_jsxDEV(Await, {\n      resolve: data.events,\n      children: loadedEvents => /*#__PURE__*/_jsxDEV(EventsList, {\n        events: loadEvents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 26\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: 'Could not fetch events'};\n    throw json({\n      message: 'Could not fetch elements'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","json","defer","Await","EventsList","Suspense","jsxDEV","_jsxDEV","EventsPage","_s","data","children","resolve","events","loadedEvents","loadEvents","fileName","_jsxFileName","lineNumber","columnNumber","_c","response","fetch","ok","message","status","loader","$RefreshReg$"],"sources":["C:/udemy-react/multipage-project/frontend/src/pages/Events.js"],"sourcesContent":["import { useLoaderData, json, defer, Await } from 'react-router-dom';\r\nimport EventsList from '../components/EventsList';\r\nimport { Suspense } from 'react';\r\n\r\nfunction EventsPage() {\r\n  const data = useLoaderData();\r\n\r\n  return\r\n  <Suspense>\r\n    <Await resolve={data.events}>\r\n      {(loadedEvents) => <EventsList events={loadEvents} />}\r\n    </Await>\r\n  </Suspense>\r\n\r\n}\r\nexport default EventsPage;\r\n\r\n\r\nasync function loadEvents() {\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n    // return {isError: true, message: 'Could not fetch events'};\r\n    throw json({ message: 'Could not fetch elements' },\r\n      { status: 500 });\r\n  } else {\r\n    return response\r\n  }\r\n}\r\nexport function loader() {\r\n  return defer({\r\n    events: loadEvents()\r\n  })\r\n}"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,IAAI,EAAEC,KAAK,EAAEC,KAAK,QAAQ,kBAAkB;AACpE,OAAOC,UAAU,MAAM,0BAA0B;AACjD,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,IAAI,GAAGV,aAAa,CAAC,CAAC;EAE5B;EACA,aAAAO,OAAA,CAACF,QAAQ;IAAAM,QAAA,eACPJ,OAAA,CAACJ,KAAK;MAACS,OAAO,EAAEF,IAAI,CAACG,MAAO;MAAAF,QAAA,EACxBG,YAAY,iBAAKP,OAAA,CAACH,UAAU;QAACS,MAAM,EAAEE;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEb;AAACV,EAAA,CAVQD,UAAU;EAAA,QACJR,aAAa;AAAA;AAAAoB,EAAA,GADnBZ,UAAU;AAWnB,eAAeA,UAAU;AAGzB,eAAeO,UAAUA,CAAA,EAAG;EAC1B,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAMtB,IAAI,CAAC;MAAEuB,OAAO,EAAE;IAA2B,CAAC,EAChD;MAAEC,MAAM,EAAE;IAAI,CAAC,CAAC;EACpB,CAAC,MAAM;IACL,OAAOJ,QAAQ;EACjB;AACF;AACA,OAAO,SAASK,MAAMA,CAAA,EAAG;EACvB,OAAOxB,KAAK,CAAC;IACXW,MAAM,EAAEE,UAAU,CAAC;EACrB,CAAC,CAAC;AACJ;AAAC,IAAAK,EAAA;AAAAO,YAAA,CAAAP,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}